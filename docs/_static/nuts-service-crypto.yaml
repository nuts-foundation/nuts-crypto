openapi: "3.0.0"
info:
  title: Nuts service crypto spec
  description: API specification for crypto services available within nuts service space
  version: 0.1.0
  license:
    name: GPLv3
paths:
  /crypto/generate:
    post:
      summary: "Send a request for checking if the given combination has valid consent"
      operationId: generateKeyPair
      tags:
        - crypto
      parameters:
        - name: legalEntity
          in: query
          description: "URN identifying the legal entity"
          required: true
          schema:
            $ref: "#/components/schemas/Identifier"
        - name: overwrite
          in: query
          description: "Overwrite key if it already exists"
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: "OK response, body holds public key in PEM format when accept format is text/plain and JWK format if accept equals application/json"
          content:
            text/plain:
              example: "-----BEGIN PUBLIC KEY----- .... -----END PUBLIC KEY-----"
            application/json:
              example: {"kty":"EC",
                        "crv":"P-256",
                        "x":"f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU",
                        "y":"x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0",
                        "kid":"Public key used in JWS spec Appendix A.3 example"
              }
        '400':
          description: "Invalid request"
          content:
            text/plain:
              example: "Invalid legalEntity URN"
              schema:
                type: string
        '409':
          description: "Conflicting request: key already exists"
          content:
            text/plain:
              example: "Key already exists"
              schema:
                type: string
  /crypto/public_key/{urn}:
    get:
      summary: "get the public key for a given organization. It returns the key in PEM or JWK form. This depends on the accept header used (text/plain vs application/json)"
      operationId: publicKey
      tags:
        - crypto
      parameters:
        - name: urn
          in: path
          schema:
            type: string
          description: "organization identifier in urn form"
          example: "urn:oid:2.16.840.1.113883.2.4.6.1:48000000"
          required: true
      responses:
        '200':
          description: "OK response, body holds public key in PEM format"
          content:
            text/plain:
              example: "-----BEGIN PUBLIC KEY----- .... -----END PUBLIC KEY-----"
            application/json:
              example: {"kty":"EC",
                        "crv":"P-256",
                        "x":"f83OJ3D2xF1Bg8vub9tLe1gHMzV76e8Tus9uPHvRVEU",
                        "y":"x_FEzRu9m36HLN_tue659LNpXW6pCyStikYjKIWI5a0",
                        "kid":"Public key used in JWS spec Appendix A.3 example"
              }
        '404':
          description: "not found"
          content:
            text/plain:
              example:
                "organization not found"
  /crypto/encrypt:
    post:
      summary: "encrypt a piece of data for a list of public keys/legalEntity's. A single symmetric keys will be used for all entries"
      operationId: encrypt
      tags:
        - crypto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EncryptRequest'
      responses:
        '200':
          description: "OK response, body holds encrypted symmetric key and cipherText"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncryptedData'
        '400':
          description: incorrect data
          content:
            text/plain:
              example:
                invalid metadata
  /crypto/decrypt:
    post:
      summary: "decrypt a cipherText for the given legalEntity"
      operationId: decrypt
      tags:
        - crypto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DecryptRequest'
      responses:
        '200':
          description: "OK response, body holds base64 encoded plainText"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlainText'
        '400':
          description: incorrect data
          content:
            text/plain:
              example:
                invalid metadata
  /crypto/external_id:
    post:
      summary: "calculate an externalId for a (custodian, subject, actor) triple"
      operationId: externalId
      tags:
        - crypto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalIdRequest'
      responses:
        '200':
          description: "OK response, body holds hex encoded hash"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalId'
        '400':
          description: incorrect data
          content:
            text/plain:
              example:
                invalid metadata
  /crypto/sign:
    post:
      summary: "sign a piece of data with the private key of the given legalEntity"
      operationId: sign
      tags:
        - crypto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignRequest'
      responses:
        '200':
          description: "OK response, body holds hex signature"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signature'
        '400':
          description: "incorrect data"
          content:
            text/plain:
              example:
                "unknown legalEntity"
  /crypto/verify:
    post:
      summary: "verify a signature given a public key, signature and the data"
      operationId: verify
      tags:
        - crypto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyRequest'
      responses:
        '200':
          description: "OK response, body holds hex signature"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Verification'
        '400':
          description: "incorrect data"
          content:
            text/plain:
              example:
                "missing signature"
  /crypto/sign_jwt:
    post:
      summary: "sign a JWT payload with the private key of the given legalEntity"
      operationId: signJwt
      tags:
        - crypto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignJwtRequest'
      responses:
        '200':
          description: "OK response, body holds JWT"
          content:
            text/plain:
              schema:
                example: "aa==.bb==.cc=="
        '400':
          description: "incorrect data"
          content:
            text/plain:
              example:
                "unknown legalEntity"
  /crypto/certificate/vendorca:
    post:
      summary: "Self-sign a vendor CA certificate."
      operationId: selfSignVendorCACertificate
      tags:
        - crypto
      parameters:
        - name: name
          in: query
          description: "Name of the vendor"
          required: true
          schema:
            type: string
      responses:
        '400':
          description: "incorrect data"
          content:
            text/plain:
              example:
                "invalid name"
        '200':
          description: "OK response, body holds certificate as PEM-encoded X.509 certificate"
          content:
            application/x-pem-file:
              schema:
                type: string
  /crypto/csr/vendorca:
    post:
      summary: "Generate a CSR for requesting a vendor CA certificate."
      operationId: generateVendorCACSR
      tags:
        - crypto
      parameters:
        - name: name
          in: query
          description: "Name of the vendor"
          required: true
          schema:
            type: string
      responses:
        '400':
          description: "incorrect data"
          content:
            text/plain:
              example:
                "invalid name"
        '200':
          description: "OK response, body holds CSR as PEM-encoded PKCS10"
          content:
            application/x-pem-file:
              schema:
                type: string
components:
  schemas:
    EncryptRequest:
      description: "EncryptRequest has a list of publicKeys and legalEntity's. The legalEntity's are there only for easy bookkeeping. The data will only be encrypted once with a symmetric key. The symmetric key will be encrypted for all given publicKeys"
      required:
        - plainText
        - encryptRequestSubjects
      properties:
        plainText:
          type: string
          description: "Base64 encoded binary data"
        encryptRequestSubjects:
          type: array
          items:
            $ref: "#/components/schemas/EncryptRequestSubject"
    EncryptRequestSubject:
      description: "A legalEntity and its public key. Only the public key is used. The resulting object will match the encrypted key to the given legalEntity"
      required:
        - legalEntity
      properties:
        legalEntity:
          $ref: "#/components/schemas/Identifier"
        publicKey:
          $ref: "#/components/schemas/PublicKey"
        jwk:
          $ref: '#/components/schemas/JWK'
    EncryptedData:
      required:
        - cipherText
        - nonce
        - encryptResponseEntries
      properties:
        cipherText:
          type: string
          description: "Base64 encoded encrypted text"
        nonce:
          type: string
          description: "Base64 encoded nonce"
        encryptResponseEntries:
          type: array
          items:
            $ref: "#/components/schemas/EncryptResponseEntry"
    EncryptResponseEntry:
      required:
        - legalEntity
        - cipherTextKey
      properties:
        cipherTextKey:
          type: string
          description: "Base64 encoded encrypted key"
        legalEntity:
          $ref: "#/components/schemas/Identifier"
    DecryptRequest:
      required:
        - legalEntity
        - cipherText
        - cipherTextKey
        - nonce
      properties:
        legalEntity:
          $ref: "#/components/schemas/Identifier"
        cipherText:
          type: string
          description: "Base64 encoded cipherText"
        cipherTextKey:
          type: string
          description: "base64 encoded encrypted symmetric key"
        nonce:
          type: string
          description: "base64 encoded nonce"
    PlainText:
      type: string
      description: "Base64 encoded plain text"
    ExternalIdRequest:
      required:
        - legalEntity
        - subject
        - actor
      properties:
        legalEntity:
          $ref: "#/components/schemas/Identifier"
        subject:
          $ref: "#/components/schemas/Identifier"
        actor:
          $ref: "#/components/schemas/Identifier"
    ExternalId:
      type: string
      description: "hex encoded identifier"
    SignRequest:
      required:
        - plainText
        - legalEntity
      properties:
        legalEntity:
          $ref: "#/components/schemas/Identifier"
        plainText:
          type: string
          description: "Base64 encoded data"
    SignJwtRequest:
      required:
        - claims
        - legalEntity
      properties:
        legalEntity:
          $ref: "#/components/schemas/Identifier"
        claims:
          type: object
    Signature:
      type: string
      description: "hex encoded signature"
    VerifyRequest:
      required:
        - plainText
        - signature
      properties:
        plainText:
          type: string
          description: "Base64 encoded binary data"
        publicKey:
          $ref: '#/components/schemas/PublicKey'
        jwk:
          $ref: '#/components/schemas/JWK'
        signature:
          type: string
          description: "hex encoded signature"
    Verification:
      required:
        - outcome
      properties:
        outcome:
          type: boolean
          description: "true or false"
    PublicKey:
      type: string
      description: "PEM encoded public key"
      deprecated: true
    JWK:
      type: object
      description: as described by https://tools.ietf.org/html/rfc7517. Modelled as object so libraries can parse the tokens themselves.
    Identifier:
      type: string
      description: >
        Generic identifier used for representing BSN, agbcode, etc.
        It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
      example: |
        * urn:oid:2.16.840.1.113883.2.4.6.3:999999990
        * urn:oid:2.16.840.1.113883.2.4.6.1:00000007
        * urn:nuts:endpoint:consent
        * urn:ietf:rfc:1779:O=Nedap, OU=Healthcare, C=NL, ST=Gelderland, L=Groenlo, CN=nuts_corda_development_local
