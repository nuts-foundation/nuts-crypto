// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"encoding/json"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"github.com/pkg/errors"
	"net/http"
)

// DecryptRequest defines model for DecryptRequest.
type DecryptRequest struct {

	// Base64 encoded cipherText
	CipherText string `json:"cipherText"`

	// base64 encoded encrypted symmetric key
	CipherTextKey string `json:"cipherTextKey"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
	LegalEntity Identifier `json:"legalEntity"`

	// base64 encoded nonce
	Nonce string `json:"nonce"`
}

// DecryptResponse defines model for DecryptResponse.
type DecryptResponse struct {

	// Base64 encoded plain text
	PlainText string `json:"plainText"`
}

// EncryptRequest defines model for EncryptRequest.
type EncryptRequest struct {
	EncryptRequestSubjects []EncryptRequestSubject `json:"encryptRequestSubjects"`

	// Base64 encoded binary data
	PlainText string `json:"plainText"`
}

// EncryptRequestSubject defines model for EncryptRequestSubject.
type EncryptRequestSubject struct {

	// as described by https://tools.ietf.org/html/rfc7517. Modelled as object so libraries can parse the tokens themselves.
	Jwk *JWK `json:"jwk,omitempty"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
	LegalEntity Identifier `json:"legalEntity"`

	// PEM encoded public key
	PublicKey *PublicKey `json:"publicKey,omitempty"`
}

// EncryptResponse defines model for EncryptResponse.
type EncryptResponse struct {

	// Base64 encoded encrypted text
	CipherText             string                 `json:"cipherText"`
	EncryptResponseEntries []EncryptResponseEntry `json:"encryptResponseEntries"`

	// Base64 encoded nonce
	Nonce string `json:"nonce"`
}

// EncryptResponseEntry defines model for EncryptResponseEntry.
type EncryptResponseEntry struct {

	// Base64 encoded encrypted key
	CipherTextKey string `json:"cipherTextKey"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
	LegalEntity Identifier `json:"legalEntity"`
}

// ExternalIdRequest defines model for ExternalIdRequest.
type ExternalIdRequest struct {

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
	Actor Identifier `json:"actor"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
	LegalEntity Identifier `json:"legalEntity"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
	Subject Identifier `json:"subject"`
}

// ExternalIdResponse defines model for ExternalIdResponse.
type ExternalIdResponse struct {

	// hex encoded identifier
	ExternalId string `json:"externalId"`
}

// Identifier defines model for Identifier.
type Identifier string

// JWK defines model for JWK.
type JWK struct {
	AdditionalProperties map[string]interface{} `json:"-"`
}

// PublicKey defines model for PublicKey.
type PublicKey string

// SignJwtRequest defines model for SignJwtRequest.
type SignJwtRequest struct {
	Claims map[string]interface{} `json:"claims"`

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
	LegalEntity Identifier `json:"legalEntity"`
}

// SignRequest defines model for SignRequest.
type SignRequest struct {

	// Generic identifier used for representing BSN, agbcode, etc. It's always constructed as an URN followed by a double colon (:) and then the identifying value of the given URN
	LegalEntity Identifier `json:"legalEntity"`

	// Base64 encoded data
	PlainText string `json:"plainText"`
}

// SignResponse defines model for SignResponse.
type SignResponse struct {

	// hex encoded signature
	Signature string `json:"signature"`
}

// VerifyRequest defines model for VerifyRequest.
type VerifyRequest struct {

	// as described by https://tools.ietf.org/html/rfc7517. Modelled as object so libraries can parse the tokens themselves.
	Jwk *JWK `json:"jwk,omitempty"`

	// Base64 encoded binary data
	PlainText string `json:"plainText"`

	// PEM encoded public key
	PublicKey *PublicKey `json:"publicKey,omitempty"`

	// hex encoded signature
	Signature string `json:"signature"`
}

// VerifyResponse defines model for VerifyResponse.
type VerifyResponse struct {

	// true or false
	Outcome bool `json:"outcome"`
}

// DecryptJSONBody defines parameters for Decrypt.
type DecryptJSONBody DecryptRequest

// EncryptJSONBody defines parameters for Encrypt.
type EncryptJSONBody EncryptRequest

// ExternalIdJSONBody defines parameters for ExternalId.
type ExternalIdJSONBody ExternalIdRequest

// GenerateKeyPairParams defines parameters for GenerateKeyPair.
type GenerateKeyPairParams struct {

	// URN identifying the legal entity
	LegalEntity Identifier `json:"legalEntity"`
}

// SignJSONBody defines parameters for Sign.
type SignJSONBody SignRequest

// SignJwtJSONBody defines parameters for SignJwt.
type SignJwtJSONBody SignJwtRequest

// VerifyJSONBody defines parameters for Verify.
type VerifyJSONBody VerifyRequest

// DecryptRequestBody defines body for Decrypt for application/json ContentType.
type DecryptJSONRequestBody DecryptJSONBody

// EncryptRequestBody defines body for Encrypt for application/json ContentType.
type EncryptJSONRequestBody EncryptJSONBody

// ExternalIdRequestBody defines body for ExternalId for application/json ContentType.
type ExternalIdJSONRequestBody ExternalIdJSONBody

// SignRequestBody defines body for Sign for application/json ContentType.
type SignJSONRequestBody SignJSONBody

// SignJwtRequestBody defines body for SignJwt for application/json ContentType.
type SignJwtJSONRequestBody SignJwtJSONBody

// VerifyRequestBody defines body for Verify for application/json ContentType.
type VerifyJSONRequestBody VerifyJSONBody

// Getter for additional properties for JWK. Returns the specified
// element and whether it was found
func (a JWK) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for JWK
func (a *JWK) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for JWK to handle AdditionalProperties
func (a *JWK) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return errors.Wrap(err, fmt.Sprintf("error unmarshaling field %s", fieldName))
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for JWK to handle AdditionalProperties
func (a JWK) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("error marshaling '%s'", fieldName))
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// decrypt a cipherText for the given legalEntity
	// (POST /crypto/decrypt)
	Decrypt(ctx echo.Context) error
	// encrypt a piece of data for a list of public keys/legalEntity's. A single symmetric keys will be used for all entries
	// (POST /crypto/encrypt)
	Encrypt(ctx echo.Context) error
	// calculate an externalId for a (custodian, subject, actor) triple
	// (POST /crypto/external_id)
	ExternalId(ctx echo.Context) error
	// Send a request for checking if the given combination has valid consent
	// (POST /crypto/generate)
	GenerateKeyPair(ctx echo.Context, params GenerateKeyPairParams) error
	// get the public key for a given organization. It returns the key in PEM or JWK form. This depends on the accept header used (text/plain vs application/json)
	// (GET /crypto/public_key/{urn})
	PublicKey(ctx echo.Context, urn string) error
	// sign a piece of data with the private key of the given legalEntity
	// (POST /crypto/sign)
	Sign(ctx echo.Context) error
	// sign a JWT payload with the private key of the given legalEntity
	// (POST /crypto/sign_jwt)
	SignJwt(ctx echo.Context) error
	// verify a signature given a public key, signature and the data
	// (POST /crypto/verify)
	Verify(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Decrypt converts echo context to params.
func (w *ServerInterfaceWrapper) Decrypt(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Decrypt(ctx)
	return err
}

// Encrypt converts echo context to params.
func (w *ServerInterfaceWrapper) Encrypt(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Encrypt(ctx)
	return err
}

// ExternalId converts echo context to params.
func (w *ServerInterfaceWrapper) ExternalId(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExternalId(ctx)
	return err
}

// GenerateKeyPair converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateKeyPair(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GenerateKeyPairParams
	// ------------- Required query parameter "legalEntity" -------------

	err = runtime.BindQueryParameter("form", true, true, "legalEntity", ctx.QueryParams(), &params.LegalEntity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntity: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateKeyPair(ctx, params)
	return err
}

// PublicKey converts echo context to params.
func (w *ServerInterfaceWrapper) PublicKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "urn" -------------
	var urn string

	err = runtime.BindStyledParameter("simple", false, "urn", ctx.Param("urn"), &urn)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter urn: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PublicKey(ctx, urn)
	return err
}

// Sign converts echo context to params.
func (w *ServerInterfaceWrapper) Sign(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Sign(ctx)
	return err
}

// SignJwt converts echo context to params.
func (w *ServerInterfaceWrapper) SignJwt(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignJwt(ctx)
	return err
}

// Verify converts echo context to params.
func (w *ServerInterfaceWrapper) Verify(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Verify(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/crypto/decrypt", wrapper.Decrypt)
	router.POST("/crypto/encrypt", wrapper.Encrypt)
	router.POST("/crypto/external_id", wrapper.ExternalId)
	router.POST("/crypto/generate", wrapper.GenerateKeyPair)
	router.GET("/crypto/public_key/:urn", wrapper.PublicKey)
	router.POST("/crypto/sign", wrapper.Sign)
	router.POST("/crypto/sign_jwt", wrapper.SignJwt)
	router.POST("/crypto/verify", wrapper.Verify)

}

