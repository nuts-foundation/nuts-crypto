// Package api provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// DecryptRequest defines component schema for DecryptRequest.
type DecryptRequest struct {
	CipherText    string     `json:"cipherText"`
	CipherTextKey string     `json:"cipherTextKey"`
	LegalEntity   Identifier `json:"legalEntity"`
	Nonce         string     `json:"nonce"`
}

// DecryptResponse defines component schema for DecryptResponse.
type DecryptResponse struct {
	PlainText string `json:"plainText"`
}

// EncryptRequest defines component schema for EncryptRequest.
type EncryptRequest struct {
	EncryptRequestSubjects []EncryptRequestSubject `json:"encryptRequestSubjects"`
	PlainText              string                  `json:"plainText"`
}

// EncryptRequestSubject defines component schema for EncryptRequestSubject.
type EncryptRequestSubject struct {
	LegalEntity Identifier `json:"legalEntity"`
	PublicKey   PublicKey  `json:"publicKey"`
}

// EncryptResponse defines component schema for EncryptResponse.
type EncryptResponse struct {
	CipherText             string                 `json:"cipherText"`
	EncryptResponseEntries []EncryptResponseEntry `json:"encryptResponseEntries"`
	Nonce                  string                 `json:"nonce"`
}

// EncryptResponseEntry defines component schema for EncryptResponseEntry.
type EncryptResponseEntry struct {
	CipherTextKey string     `json:"cipherTextKey"`
	LegalEntity   Identifier `json:"legalEntity"`
}

// ExternalIdRequest defines component schema for ExternalIdRequest.
type ExternalIdRequest struct {
	Actor       Identifier `json:"actor"`
	LegalEntity Identifier `json:"legalEntity"`
	Subject     Identifier `json:"subject"`
}

// ExternalIdResponse defines component schema for ExternalIdResponse.
type ExternalIdResponse struct {
	ExternalId string `json:"externalId"`
}

// Identifier defines component schema for Identifier.
type Identifier string

// PublicKey defines component schema for PublicKey.
type PublicKey string

// SignRequest defines component schema for SignRequest.
type SignRequest struct {
	LegalEntity Identifier `json:"legalEntity"`
	PlainText   string     `json:"plainText"`
}

// SignResponse defines component schema for SignResponse.
type SignResponse struct {
	Signature string `json:"signature"`
}

// VerifyRequest defines component schema for VerifyRequest.
type VerifyRequest struct {
	PlainText string    `json:"plainText"`
	PublicKey PublicKey `json:"publicKey"`
	Signature string    `json:"signature"`
}

// VerifyResponse defines component schema for VerifyResponse.
type VerifyResponse struct {
	Outcome bool `json:"outcome"`
}

// GenerateKeyPairParams defines parameters for GenerateKeyPair.
type GenerateKeyPairParams struct {
	LegalEntity Identifier `json:"legalEntity"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// decrypt a cipherText for the given legalEntity (POST /crypto/decrypt)
	Decrypt(ctx echo.Context) error
	// encrypt a piece of data for a list of public keys/legalEntity's. A single symmetric keys will be used for all entries (POST /crypto/encrypt)
	Encrypt(ctx echo.Context) error
	// calculate an externalId for a (custodian, subject, actor) triple (POST /crypto/external_id)
	ExternalId(ctx echo.Context) error
	// Send a request for checking if the given combination has valid consent (POST /crypto/generate)
	GenerateKeyPair(ctx echo.Context, params GenerateKeyPairParams) error
	// sign a piece of data with the private key of the given legalEntity (POST /crypto/sign)
	Sign(ctx echo.Context) error
	// verify a signature given a public key, signature and the data (POST /crypto/verify)
	Verify(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Decrypt converts echo context to params.
func (w *ServerInterfaceWrapper) Decrypt(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Decrypt(ctx)
	return err
}

// Encrypt converts echo context to params.
func (w *ServerInterfaceWrapper) Encrypt(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Encrypt(ctx)
	return err
}

// ExternalId converts echo context to params.
func (w *ServerInterfaceWrapper) ExternalId(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExternalId(ctx)
	return err
}

// GenerateKeyPair converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateKeyPair(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params GenerateKeyPairParams
	// ------------- Required query parameter "legalEntity" -------------
	if paramValue := ctx.QueryParam("legalEntity"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument legalEntity is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "legalEntity", ctx.QueryParams(), &params.LegalEntity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntity: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateKeyPair(ctx, params)
	return err
}

// Sign converts echo context to params.
func (w *ServerInterfaceWrapper) Sign(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Sign(ctx)
	return err
}

// Verify converts echo context to params.
func (w *ServerInterfaceWrapper) Verify(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Verify(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/crypto/decrypt", wrapper.Decrypt)
	router.POST("/crypto/encrypt", wrapper.Encrypt)
	router.POST("/crypto/external_id", wrapper.ExternalId)
	router.POST("/crypto/generate", wrapper.GenerateKeyPair)
	router.POST("/crypto/sign", wrapper.Sign)
	router.POST("/crypto/verify", wrapper.Verify)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/ld/GwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

