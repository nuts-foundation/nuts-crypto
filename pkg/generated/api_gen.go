// Package generated provides primitives to interact the openapi HTTP API.
//
// This is an autogenerated file, any edits which you make here will be lost!
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"net/http"
	"strings"
)

// DecryptRequest defines component schema for DecryptRequest.
type DecryptRequest struct {
	CipherText    string     `json:"cipherText"`
	CipherTextKey string     `json:"cipherTextKey"`
	LegalEntity   Identifier `json:"legalEntity"`
	Nonce         string     `json:"nonce"`
}

// DecryptResponse defines component schema for DecryptResponse.
type DecryptResponse struct {
	PlainText string `json:"plainText"`
}

// EncryptRequest defines component schema for EncryptRequest.
type EncryptRequest struct {
	EncryptRequestSubjects []EncryptRequestSubject `json:"encryptRequestSubjects"`
	PlainText              string                  `json:"plainText"`
}

// EncryptRequestSubject defines component schema for EncryptRequestSubject.
type EncryptRequestSubject struct {
	LegalEntity Identifier `json:"legalEntity"`
	PublicKey   PublicKey  `json:"publicKey"`
}

// EncryptResponse defines component schema for EncryptResponse.
type EncryptResponse struct {
	CipherText             string                 `json:"cipherText"`
	EncryptResponseEntries []EncryptResponseEntry `json:"encryptResponseEntries"`
	Nonce                  string                 `json:"nonce"`
}

// EncryptResponseEntry defines component schema for EncryptResponseEntry.
type EncryptResponseEntry struct {
	CipherTextKey string     `json:"cipherTextKey"`
	LegalEntity   Identifier `json:"legalEntity"`
}

// ExternalIdRequest defines component schema for ExternalIdRequest.
type ExternalIdRequest struct {
	LegalEntity Identifier `json:"legalEntity"`
	Subject     Identifier `json:"subject"`
}

// ExternalIdResponse defines component schema for ExternalIdResponse.
type ExternalIdResponse struct {
	ExternalId string `json:"externalId"`
}

// Identifier defines component schema for Identifier.
type Identifier string

// PublicKey defines component schema for PublicKey.
type PublicKey string

// SignRequest defines component schema for SignRequest.
type SignRequest struct {
	LegalEntity Identifier `json:"legalEntity"`
	PlainText   string     `json:"plainText"`
}

// SignResponse defines component schema for SignResponse.
type SignResponse struct {
	Signature string `json:"signature"`
}

// VerifyRequest defines component schema for VerifyRequest.
type VerifyRequest struct {
	PlainText string    `json:"plainText"`
	PublicKey PublicKey `json:"publicKey"`
	Signature string    `json:"signature"`
}

// VerifyResponse defines component schema for VerifyResponse.
type VerifyResponse struct {
	Outcome bool `json:"outcome"`
}

// GenerateKeyPairParams defines parameters for GenerateKeyPair.
type GenerateKeyPairParams struct {
	LegalEntity Identifier `json:"legalEntity"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// decrypt a cipherText for the given legalEntity (POST /crypto/decrypt)
	Decrypt(ctx echo.Context) error
	// encrypt a piece of data for a list of public keys/legalEntity's. A single symmetric keys will be used for all entries (POST /crypto/encrypt)
	Encrypt(ctx echo.Context) error
	// calculate an externalId for an identifier for a given legalEntity (POST /crypto/external_id)
	ExternalId(ctx echo.Context) error
	// Send a request for checking if the given combination has valid consent (POST /crypto/generate)
	GenerateKeyPair(ctx echo.Context, params GenerateKeyPairParams) error
	// sign a piece of data with the private key of the given legalEntity (POST /crypto/sign)
	Sign(ctx echo.Context) error
	// verify a signature given a public key, signature and the data (POST /crypto/verify)
	Verify(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Decrypt converts echo context to params.
func (w *ServerInterfaceWrapper) Decrypt(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Decrypt(ctx)
	return err
}

// Encrypt converts echo context to params.
func (w *ServerInterfaceWrapper) Encrypt(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Encrypt(ctx)
	return err
}

// ExternalId converts echo context to params.
func (w *ServerInterfaceWrapper) ExternalId(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ExternalId(ctx)
	return err
}

// GenerateKeyPair converts echo context to params.
func (w *ServerInterfaceWrapper) GenerateKeyPair(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params GenerateKeyPairParams
	// ------------- Required query parameter "legalEntity" -------------
	if paramValue := ctx.QueryParam("legalEntity"); paramValue != "" {

	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Query argument legalEntity is required, but not found"))
	}

	err = runtime.BindQueryParameter("form", true, true, "legalEntity", ctx.QueryParams(), &params.LegalEntity)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntity: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateKeyPair(ctx, params)
	return err
}

// Sign converts echo context to params.
func (w *ServerInterfaceWrapper) Sign(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Sign(ctx)
	return err
}

// Verify converts echo context to params.
func (w *ServerInterfaceWrapper) Verify(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Verify(ctx)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/crypto/decrypt", wrapper.Decrypt)
	router.POST("/crypto/encrypt", wrapper.Encrypt)
	router.POST("/crypto/external_id", wrapper.ExternalId)
	router.POST("/crypto/generate", wrapper.GenerateKeyPair)
	router.POST("/crypto/sign", wrapper.Sign)
	router.POST("/crypto/verify", wrapper.Verify)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"PSysVn8HAAD//+IfwiUkGwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

