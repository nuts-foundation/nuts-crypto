// This is an autogenerated file, any edits which you make here will be lost!
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo"
	"net/http"
	"strings"
)

// Type definition for component schema "LegalEntityURI"
type LegalEntityURI string

// Parameters object for GenerateKeyPairImpl
type GenerateKeyPairParams struct {
	LegalEntityURI LegalEntityURI `json:"legalEntityURI"`
}

type ServerInterface interface {
	// Send a request for checking if the given combination has valid consent (POST /crypto)
	GenerateKeyPair(ctx echo.Context, params GenerateKeyPairParams) error
}

type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Wrapper for GenerateKeyPairImpl
func (w *ServerInterfaceWrapper) GenerateKeyPair(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the
	// context.
	var params GenerateKeyPairParams
	// ------------- Required query parameter "legalEntityURI" -------------

	{
		err = runtime.BindQueryParameter("form", true, true, "legalEntityURI", ctx.QueryParams(), &params.LegalEntityURI)

		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter legalEntityURI: %s", err))
		}
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GenerateKeyPair(ctx, params)
	return err
}

func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/crypto", wrapper.GenerateKeyPair)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/2xTTW/bPAz+KwL7Ho3YfbvLfNthGIIWQ9Chp6EHRqZjbrKsinRWI/B/H2gnaLvWF0ui",
	"H5HPh0/ghz4NkaIK1CcQ31GPy/KODhi+RmWdHu63dtKQ+MxJeYhQw8P91jXUcuR4cNqRa1DRybj/RV4L",
	"N8qIIUxLJaEyRYUC6Bn7FAhq6FST1GUZR5VNDCU3ZL2YpNxLvPp8fiooQKdkCNHM8QDzPBfAsR3ej/Rl",
	"t3WSyHPLHu3MtUN2Pk9JByeUj+xJHB6RA+4DuT+sHUdnI1zKThJ6ggICe4pC1iRib/2/7e6ONzAXoKwL",
	"he+vcZcuiTwUcKQs60zV5npTGWpIFDEx1HCzqTbGK6F2i9TlCrZlGkTtPSTKC4VtAzUcKNqWbmnaIecF",
	"m7EnpSxQ//zImlXPdrq4E8xOt2g8gQkINTyNlG1zJhjeOl5ApqeRMzVQax6pOKfDxvsvUws1XJUv8SnP",
	"2Sn/Cc48P9pNkoYotND9v7p+790tTa5DcXui6HwmVGqcjN6TSDuGMJmGn6rKkH6IanmqT6D0rGUKaHxO",
	"r+K1jUcM3LiVyMvgH2Tp7RwXoHEnUbAvZOx7zBPU8INi4/BSXOPVkf9tKnO7CH3gozEY+j3HNYRGa73U",
	"mwbLj6B4MOfg7PzjPM/z3wAAAP//rVeL1o0DAAA=",
}

// Returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

